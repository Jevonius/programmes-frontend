/**
 * Grid object.
 *
 * An IE 8 compatible implementation of a fluid grid with fixed gutter sizes.
 * Use in conjunction with the width objects to set the sizing of your grid
 * items.
 *
 * The original grid from programmes had IE7 compatibility by using an inner
 * `grid__inner` div rather than using box-sizing: border-box.
 * As we no longer care about IE7 support we've moved to use border-box and apply
 * padding directly to the `grid` element, which means we can get rid of that
 * now-unneeded `grid__inner` div.
 *
 * Sample usage:
 *
 * <div class="grid-wrapper">
 *      <div class="grid one-third">
 *          <p>One third grid</p>
 *      </div>
 *
 *      <div class="grid two-thirds">
 *          <p>Two thirds grid</p>
 *      </div>
 *
 *      <div class="grid one-half">
 *          <p>One half grid</p>
 *      </div>
 *
 *      <div class="grid one-quarter">
 *          <p>One quarter grid</p>
 *      </div>
 *
 *      <div class="grid one-quarter">
 *          <p>One quarter grid</p>
 *      </div>
 *   </div>
 */

$gel-grid-gutter-basic: 8px !default;
$gel-grid-gutter-basic-half: $gel-grid-gutter-basic / 2;

$gel-grid-gutter-wide: 16px !default;
$gel-grid-gutter-wide-half: $gel-grid-gutter-wide / 2;

.grid-wrapper {
    display: block;
    margin-left: -$gel-grid-gutter-basic;

    list-style: none;
    margin-bottom: 0;

    // Kill whitespace spacing
    letter-spacing: -0.31em;
    text-rendering: optimizeSpeed;
    text-align: left;

    // Clearfix
    zoom: 1;

    &::before,
    &::after {
        content: ' ';
        display: table;
    }

    &::after {
        clear: both;
    }
}

// Opera as of 12 on Windows needs word-spacing. The ".opera" selector is
// used to prevent actual prefocus styling and is not required in markup.
.opera:-o-prefocus,
.grid-wrapper {
    word-spacing: -0.43em;
}

.grid {
    display: inline-block;
    zoom: 1;
    vertical-align: top;

    // In case people want to use a * { box-sizing: content-box; } declaration
    box-sizing: border-box;

    padding-left: $gel-grid-gutter-basic;

    // Reset whitespace spacing
    letter-spacing: normal;
    word-spacing: normal;
    text-rendering: auto;

    // Grid components have a default width so that you don't need to always
    // use the .one-whole class for mobile-first implementations
    width: 100%;
}

// Sometimes floated grids are preferable over inline-block grids. Useful if
// we want to have a fixed width container next to a variable width one.
.grid-float {
    float: left;

    // Grid components have a default width so that you don't need to always
    // use the .one-whole class for mobile-first implementations
    width: 100%;
}

.grid-wrapper--center {
    text-align: center;

    > .grid {
        text-align: left;
    }
}

.grid-wrapper--bothsides {
    margin-left: -$gel-grid-gutter-basic-half;
    margin-right: -$gel-grid-gutter-basic-half;

    .grid {
        padding-left: $gel-grid-gutter-basic-half;
        padding-right: $gel-grid-gutter-basic-half;
    }
}

// Faux column pushdown
$massive-pushdown: 50em;

.grid-wrapper--fauxcolumn {
    overflow: hidden;

    .grid {
        margin-bottom: -$massive-pushdown;
        padding-bottom: $massive-pushdown;
    }
}

.fauxcolumn {
    margin-bottom: -$massive-pushdown;
    padding-bottom: $massive-pushdown;
}

.grid-gutter-r {
    margin-right: $gel-grid-gutter-basic;
}

.grid-gutter-l {
    margin-left: $gel-grid-gutter-basic;
}

@include mq-range('bpw') {
    .grid-wrapper {
        margin-left: -$gel-grid-gutter-wide;
    }

    .grid {
        padding-left: $gel-grid-gutter-wide;
    }

    .grid-wrapper--bothsides {
        margin-left: -$gel-grid-gutter-wide-half;
        margin-right: -$gel-grid-gutter-wide-half;

        .grid {
            padding-left: $gel-grid-gutter-wide-half;
            padding-right: $gel-grid-gutter-wide-half;
        }
    }

    .grid-gutter-r {
        margin-right: $gel-grid-gutter-wide;
    }

    .grid-gutter-l {
        margin-left: $gel-grid-gutter-wide;
    }
}

@mixin gel-gutterwidths-setup($namespace: '', $spacing: $gel-grid-gutter-basic) {
    // Flush
    // Grid items sit flush to each other instead of having any spacing
    .grid-wrapper--flush#{$namespace} {
        margin-right: 0;
        margin-left: 0;
    }

    .grid--flush#{$namespace} {
        padding-right: 0;
        padding-left: 0;
    }

    .grid-wrapper--half#{$namespace} {
        margin-right: 0;
        margin-left: -$spacing / 2;
    }

    .grid--half#{$namespace} {
        padding-right: 0;
        padding-left: $spacing / 2;
    }

}

@include gel-gutterwidths-setup('', $gel-grid-gutter-basic);

@each $name in ($gel-widths-breakpoints) {
    $spacing: if(index(('bpb1', 'bpb2'), $name), $gel-grid-gutter-basic, $gel-grid-gutter-wide);

    @include mq-range($name) {
        @include gel-gutterwidths-setup('\\@#{$name}', $spacing);
    }
}

// Bound grids

// When a single column looks too wide but two side-by-side columns looks
// too skinny use a grid--bounded to have a single column with some spacing
// around it (best used with grid-wrapper--center).
.grid--bounded {
    max-width: 624px;
}

@include mq-range('bpw') {
    .grow-to-fit\@bpw {
        float: none;
        width: auto;
        overflow: auto; // Stop content peeking out underneath columns to the left
    }
}

// For letting you undo grid-unbounded at a given breakpoint
@each $name in $gel-widths-breakpoints {
    @include mq-range($name) {
        .grid--unbounded\@#{$name} {
            max-width: none;
        }
    }
}

